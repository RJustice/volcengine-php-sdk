<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Storageebs\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class VolumeForDescribeVolumesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VolumeForDescribeVolumesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auto_snapshot_policy_id' => 'string',
        'auto_snapshot_policy_name' => 'string',
        'billing_type' => 'int',
        'created_at' => 'string',
        'delete_with_instance' => 'bool',
        'description' => 'string',
        'device_name' => 'string',
        'error_detail' => 'string',
        'expired_time' => 'string',
        'image_id' => 'string',
        'instance_id' => 'string',
        'kind' => 'string',
        'overdue_reclaim_time' => 'string',
        'overdue_time' => 'string',
        'pay_type' => 'string',
        'project_name' => 'string',
        'renew_type' => 'int',
        'size' => 'string',
        'snapshot_count' => 'int',
        'source_snapshot_id' => 'string',
        'status' => 'string',
        'tags' => '\Volcengine\Storageebs\Model\TagForDescribeVolumesOutput[]',
        'trade_status' => 'int',
        'updated_at' => 'string',
        'volume_id' => 'string',
        'volume_name' => 'string',
        'volume_type' => 'string',
        'zone_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auto_snapshot_policy_id' => null,
        'auto_snapshot_policy_name' => null,
        'billing_type' => 'int32',
        'created_at' => null,
        'delete_with_instance' => null,
        'description' => null,
        'device_name' => null,
        'error_detail' => null,
        'expired_time' => null,
        'image_id' => null,
        'instance_id' => null,
        'kind' => null,
        'overdue_reclaim_time' => null,
        'overdue_time' => null,
        'pay_type' => null,
        'project_name' => null,
        'renew_type' => 'int32',
        'size' => 'json_number',
        'snapshot_count' => 'int32',
        'source_snapshot_id' => null,
        'status' => null,
        'tags' => null,
        'trade_status' => 'int32',
        'updated_at' => null,
        'volume_id' => null,
        'volume_name' => null,
        'volume_type' => null,
        'zone_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_snapshot_policy_id' => 'AutoSnapshotPolicyId',
        'auto_snapshot_policy_name' => 'AutoSnapshotPolicyName',
        'billing_type' => 'BillingType',
        'created_at' => 'CreatedAt',
        'delete_with_instance' => 'DeleteWithInstance',
        'description' => 'Description',
        'device_name' => 'DeviceName',
        'error_detail' => 'ErrorDetail',
        'expired_time' => 'ExpiredTime',
        'image_id' => 'ImageId',
        'instance_id' => 'InstanceId',
        'kind' => 'Kind',
        'overdue_reclaim_time' => 'OverdueReclaimTime',
        'overdue_time' => 'OverdueTime',
        'pay_type' => 'PayType',
        'project_name' => 'ProjectName',
        'renew_type' => 'RenewType',
        'size' => 'Size',
        'snapshot_count' => 'SnapshotCount',
        'source_snapshot_id' => 'SourceSnapshotId',
        'status' => 'Status',
        'tags' => 'Tags',
        'trade_status' => 'TradeStatus',
        'updated_at' => 'UpdatedAt',
        'volume_id' => 'VolumeId',
        'volume_name' => 'VolumeName',
        'volume_type' => 'VolumeType',
        'zone_id' => 'ZoneId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_snapshot_policy_id' => 'setAutoSnapshotPolicyId',
        'auto_snapshot_policy_name' => 'setAutoSnapshotPolicyName',
        'billing_type' => 'setBillingType',
        'created_at' => 'setCreatedAt',
        'delete_with_instance' => 'setDeleteWithInstance',
        'description' => 'setDescription',
        'device_name' => 'setDeviceName',
        'error_detail' => 'setErrorDetail',
        'expired_time' => 'setExpiredTime',
        'image_id' => 'setImageId',
        'instance_id' => 'setInstanceId',
        'kind' => 'setKind',
        'overdue_reclaim_time' => 'setOverdueReclaimTime',
        'overdue_time' => 'setOverdueTime',
        'pay_type' => 'setPayType',
        'project_name' => 'setProjectName',
        'renew_type' => 'setRenewType',
        'size' => 'setSize',
        'snapshot_count' => 'setSnapshotCount',
        'source_snapshot_id' => 'setSourceSnapshotId',
        'status' => 'setStatus',
        'tags' => 'setTags',
        'trade_status' => 'setTradeStatus',
        'updated_at' => 'setUpdatedAt',
        'volume_id' => 'setVolumeId',
        'volume_name' => 'setVolumeName',
        'volume_type' => 'setVolumeType',
        'zone_id' => 'setZoneId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_snapshot_policy_id' => 'getAutoSnapshotPolicyId',
        'auto_snapshot_policy_name' => 'getAutoSnapshotPolicyName',
        'billing_type' => 'getBillingType',
        'created_at' => 'getCreatedAt',
        'delete_with_instance' => 'getDeleteWithInstance',
        'description' => 'getDescription',
        'device_name' => 'getDeviceName',
        'error_detail' => 'getErrorDetail',
        'expired_time' => 'getExpiredTime',
        'image_id' => 'getImageId',
        'instance_id' => 'getInstanceId',
        'kind' => 'getKind',
        'overdue_reclaim_time' => 'getOverdueReclaimTime',
        'overdue_time' => 'getOverdueTime',
        'pay_type' => 'getPayType',
        'project_name' => 'getProjectName',
        'renew_type' => 'getRenewType',
        'size' => 'getSize',
        'snapshot_count' => 'getSnapshotCount',
        'source_snapshot_id' => 'getSourceSnapshotId',
        'status' => 'getStatus',
        'tags' => 'getTags',
        'trade_status' => 'getTradeStatus',
        'updated_at' => 'getUpdatedAt',
        'volume_id' => 'getVolumeId',
        'volume_name' => 'getVolumeName',
        'volume_type' => 'getVolumeType',
        'zone_id' => 'getZoneId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_snapshot_policy_id'] = isset($data['auto_snapshot_policy_id']) ? $data['auto_snapshot_policy_id'] : null;
        $this->container['auto_snapshot_policy_name'] = isset($data['auto_snapshot_policy_name']) ? $data['auto_snapshot_policy_name'] : null;
        $this->container['billing_type'] = isset($data['billing_type']) ? $data['billing_type'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['delete_with_instance'] = isset($data['delete_with_instance']) ? $data['delete_with_instance'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['device_name'] = isset($data['device_name']) ? $data['device_name'] : null;
        $this->container['error_detail'] = isset($data['error_detail']) ? $data['error_detail'] : null;
        $this->container['expired_time'] = isset($data['expired_time']) ? $data['expired_time'] : null;
        $this->container['image_id'] = isset($data['image_id']) ? $data['image_id'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['kind'] = isset($data['kind']) ? $data['kind'] : null;
        $this->container['overdue_reclaim_time'] = isset($data['overdue_reclaim_time']) ? $data['overdue_reclaim_time'] : null;
        $this->container['overdue_time'] = isset($data['overdue_time']) ? $data['overdue_time'] : null;
        $this->container['pay_type'] = isset($data['pay_type']) ? $data['pay_type'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['renew_type'] = isset($data['renew_type']) ? $data['renew_type'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['snapshot_count'] = isset($data['snapshot_count']) ? $data['snapshot_count'] : null;
        $this->container['source_snapshot_id'] = isset($data['source_snapshot_id']) ? $data['source_snapshot_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['trade_status'] = isset($data['trade_status']) ? $data['trade_status'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['volume_id'] = isset($data['volume_id']) ? $data['volume_id'] : null;
        $this->container['volume_name'] = isset($data['volume_name']) ? $data['volume_name'] : null;
        $this->container['volume_type'] = isset($data['volume_type']) ? $data['volume_type'] : null;
        $this->container['zone_id'] = isset($data['zone_id']) ? $data['zone_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_snapshot_policy_id
     *
     * @return string
     */
    public function getAutoSnapshotPolicyId()
    {
        return $this->container['auto_snapshot_policy_id'];
    }

    /**
     * Sets auto_snapshot_policy_id
     *
     * @param string $auto_snapshot_policy_id auto_snapshot_policy_id
     *
     * @return $this
     */
    public function setAutoSnapshotPolicyId($auto_snapshot_policy_id)
    {
        $this->container['auto_snapshot_policy_id'] = $auto_snapshot_policy_id;

        return $this;
    }

    /**
     * Gets auto_snapshot_policy_name
     *
     * @return string
     */
    public function getAutoSnapshotPolicyName()
    {
        return $this->container['auto_snapshot_policy_name'];
    }

    /**
     * Sets auto_snapshot_policy_name
     *
     * @param string $auto_snapshot_policy_name auto_snapshot_policy_name
     *
     * @return $this
     */
    public function setAutoSnapshotPolicyName($auto_snapshot_policy_name)
    {
        $this->container['auto_snapshot_policy_name'] = $auto_snapshot_policy_name;

        return $this;
    }

    /**
     * Gets billing_type
     *
     * @return int
     */
    public function getBillingType()
    {
        return $this->container['billing_type'];
    }

    /**
     * Sets billing_type
     *
     * @param int $billing_type billing_type
     *
     * @return $this
     */
    public function setBillingType($billing_type)
    {
        $this->container['billing_type'] = $billing_type;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets delete_with_instance
     *
     * @return bool
     */
    public function getDeleteWithInstance()
    {
        return $this->container['delete_with_instance'];
    }

    /**
     * Sets delete_with_instance
     *
     * @param bool $delete_with_instance delete_with_instance
     *
     * @return $this
     */
    public function setDeleteWithInstance($delete_with_instance)
    {
        $this->container['delete_with_instance'] = $delete_with_instance;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets device_name
     *
     * @return string
     */
    public function getDeviceName()
    {
        return $this->container['device_name'];
    }

    /**
     * Sets device_name
     *
     * @param string $device_name device_name
     *
     * @return $this
     */
    public function setDeviceName($device_name)
    {
        $this->container['device_name'] = $device_name;

        return $this;
    }

    /**
     * Gets error_detail
     *
     * @return string
     */
    public function getErrorDetail()
    {
        return $this->container['error_detail'];
    }

    /**
     * Sets error_detail
     *
     * @param string $error_detail error_detail
     *
     * @return $this
     */
    public function setErrorDetail($error_detail)
    {
        $this->container['error_detail'] = $error_detail;

        return $this;
    }

    /**
     * Gets expired_time
     *
     * @return string
     */
    public function getExpiredTime()
    {
        return $this->container['expired_time'];
    }

    /**
     * Sets expired_time
     *
     * @param string $expired_time expired_time
     *
     * @return $this
     */
    public function setExpiredTime($expired_time)
    {
        $this->container['expired_time'] = $expired_time;

        return $this;
    }

    /**
     * Gets image_id
     *
     * @return string
     */
    public function getImageId()
    {
        return $this->container['image_id'];
    }

    /**
     * Sets image_id
     *
     * @param string $image_id image_id
     *
     * @return $this
     */
    public function setImageId($image_id)
    {
        $this->container['image_id'] = $image_id;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets kind
     *
     * @return string
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param string $kind kind
     *
     * @return $this
     */
    public function setKind($kind)
    {
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets overdue_reclaim_time
     *
     * @return string
     */
    public function getOverdueReclaimTime()
    {
        return $this->container['overdue_reclaim_time'];
    }

    /**
     * Sets overdue_reclaim_time
     *
     * @param string $overdue_reclaim_time overdue_reclaim_time
     *
     * @return $this
     */
    public function setOverdueReclaimTime($overdue_reclaim_time)
    {
        $this->container['overdue_reclaim_time'] = $overdue_reclaim_time;

        return $this;
    }

    /**
     * Gets overdue_time
     *
     * @return string
     */
    public function getOverdueTime()
    {
        return $this->container['overdue_time'];
    }

    /**
     * Sets overdue_time
     *
     * @param string $overdue_time overdue_time
     *
     * @return $this
     */
    public function setOverdueTime($overdue_time)
    {
        $this->container['overdue_time'] = $overdue_time;

        return $this;
    }

    /**
     * Gets pay_type
     *
     * @return string
     */
    public function getPayType()
    {
        return $this->container['pay_type'];
    }

    /**
     * Sets pay_type
     *
     * @param string $pay_type pay_type
     *
     * @return $this
     */
    public function setPayType($pay_type)
    {
        $this->container['pay_type'] = $pay_type;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets renew_type
     *
     * @return int
     */
    public function getRenewType()
    {
        return $this->container['renew_type'];
    }

    /**
     * Sets renew_type
     *
     * @param int $renew_type renew_type
     *
     * @return $this
     */
    public function setRenewType($renew_type)
    {
        $this->container['renew_type'] = $renew_type;

        return $this;
    }

    /**
     * Gets size
     *
     * @return string
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string $size size
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets snapshot_count
     *
     * @return int
     */
    public function getSnapshotCount()
    {
        return $this->container['snapshot_count'];
    }

    /**
     * Sets snapshot_count
     *
     * @param int $snapshot_count snapshot_count
     *
     * @return $this
     */
    public function setSnapshotCount($snapshot_count)
    {
        $this->container['snapshot_count'] = $snapshot_count;

        return $this;
    }

    /**
     * Gets source_snapshot_id
     *
     * @return string
     */
    public function getSourceSnapshotId()
    {
        return $this->container['source_snapshot_id'];
    }

    /**
     * Sets source_snapshot_id
     *
     * @param string $source_snapshot_id source_snapshot_id
     *
     * @return $this
     */
    public function setSourceSnapshotId($source_snapshot_id)
    {
        $this->container['source_snapshot_id'] = $source_snapshot_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Storageebs\Model\TagForDescribeVolumesOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Storageebs\Model\TagForDescribeVolumesOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets trade_status
     *
     * @return int
     */
    public function getTradeStatus()
    {
        return $this->container['trade_status'];
    }

    /**
     * Sets trade_status
     *
     * @param int $trade_status trade_status
     *
     * @return $this
     */
    public function setTradeStatus($trade_status)
    {
        $this->container['trade_status'] = $trade_status;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets volume_id
     *
     * @return string
     */
    public function getVolumeId()
    {
        return $this->container['volume_id'];
    }

    /**
     * Sets volume_id
     *
     * @param string $volume_id volume_id
     *
     * @return $this
     */
    public function setVolumeId($volume_id)
    {
        $this->container['volume_id'] = $volume_id;

        return $this;
    }

    /**
     * Gets volume_name
     *
     * @return string
     */
    public function getVolumeName()
    {
        return $this->container['volume_name'];
    }

    /**
     * Sets volume_name
     *
     * @param string $volume_name volume_name
     *
     * @return $this
     */
    public function setVolumeName($volume_name)
    {
        $this->container['volume_name'] = $volume_name;

        return $this;
    }

    /**
     * Gets volume_type
     *
     * @return string
     */
    public function getVolumeType()
    {
        return $this->container['volume_type'];
    }

    /**
     * Sets volume_type
     *
     * @param string $volume_type volume_type
     *
     * @return $this
     */
    public function setVolumeType($volume_type)
    {
        $this->container['volume_type'] = $volume_type;

        return $this;
    }

    /**
     * Gets zone_id
     *
     * @return string
     */
    public function getZoneId()
    {
        return $this->container['zone_id'];
    }

    /**
     * Sets zone_id
     *
     * @param string $zone_id zone_id
     *
     * @return $this
     */
    public function setZoneId($zone_id)
    {
        $this->container['zone_id'] = $zone_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

