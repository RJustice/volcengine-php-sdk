<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vpc\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ModifyPrefixListRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ModifyPrefixListRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'add_prefix_list_entries' => '\Volcengine\Vpc\Model\AddPrefixListEntryForModifyPrefixListInput[]',
        'client_token' => 'string',
        'description' => 'string',
        'dry_run' => 'string',
        'max_entries' => 'int',
        'prefix_list_id' => 'string',
        'prefix_list_name' => 'string',
        'remove_prefix_list_entries' => '\Volcengine\Vpc\Model\RemovePrefixListEntryForModifyPrefixListInput[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'add_prefix_list_entries' => null,
        'client_token' => null,
        'description' => null,
        'dry_run' => null,
        'max_entries' => null,
        'prefix_list_id' => null,
        'prefix_list_name' => null,
        'remove_prefix_list_entries' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'add_prefix_list_entries' => 'AddPrefixListEntries',
        'client_token' => 'ClientToken',
        'description' => 'Description',
        'dry_run' => 'DryRun',
        'max_entries' => 'MaxEntries',
        'prefix_list_id' => 'PrefixListId',
        'prefix_list_name' => 'PrefixListName',
        'remove_prefix_list_entries' => 'RemovePrefixListEntries'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'add_prefix_list_entries' => 'setAddPrefixListEntries',
        'client_token' => 'setClientToken',
        'description' => 'setDescription',
        'dry_run' => 'setDryRun',
        'max_entries' => 'setMaxEntries',
        'prefix_list_id' => 'setPrefixListId',
        'prefix_list_name' => 'setPrefixListName',
        'remove_prefix_list_entries' => 'setRemovePrefixListEntries'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'add_prefix_list_entries' => 'getAddPrefixListEntries',
        'client_token' => 'getClientToken',
        'description' => 'getDescription',
        'dry_run' => 'getDryRun',
        'max_entries' => 'getMaxEntries',
        'prefix_list_id' => 'getPrefixListId',
        'prefix_list_name' => 'getPrefixListName',
        'remove_prefix_list_entries' => 'getRemovePrefixListEntries'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['add_prefix_list_entries'] = isset($data['add_prefix_list_entries']) ? $data['add_prefix_list_entries'] : null;
        $this->container['client_token'] = isset($data['client_token']) ? $data['client_token'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['dry_run'] = isset($data['dry_run']) ? $data['dry_run'] : null;
        $this->container['max_entries'] = isset($data['max_entries']) ? $data['max_entries'] : null;
        $this->container['prefix_list_id'] = isset($data['prefix_list_id']) ? $data['prefix_list_id'] : null;
        $this->container['prefix_list_name'] = isset($data['prefix_list_name']) ? $data['prefix_list_name'] : null;
        $this->container['remove_prefix_list_entries'] = isset($data['remove_prefix_list_entries']) ? $data['remove_prefix_list_entries'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['prefix_list_id'] === null) {
            $invalidProperties[] = "'prefix_list_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets add_prefix_list_entries
     *
     * @return \Volcengine\Vpc\Model\AddPrefixListEntryForModifyPrefixListInput[]
     */
    public function getAddPrefixListEntries()
    {
        return $this->container['add_prefix_list_entries'];
    }

    /**
     * Sets add_prefix_list_entries
     *
     * @param \Volcengine\Vpc\Model\AddPrefixListEntryForModifyPrefixListInput[] $add_prefix_list_entries add_prefix_list_entries
     *
     * @return $this
     */
    public function setAddPrefixListEntries($add_prefix_list_entries)
    {
        $this->container['add_prefix_list_entries'] = $add_prefix_list_entries;

        return $this;
    }

    /**
     * Gets client_token
     *
     * @return string
     */
    public function getClientToken()
    {
        return $this->container['client_token'];
    }

    /**
     * Sets client_token
     *
     * @param string $client_token client_token
     *
     * @return $this
     */
    public function setClientToken($client_token)
    {
        $this->container['client_token'] = $client_token;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets dry_run
     *
     * @return string
     */
    public function getDryRun()
    {
        return $this->container['dry_run'];
    }

    /**
     * Sets dry_run
     *
     * @param string $dry_run dry_run
     *
     * @return $this
     */
    public function setDryRun($dry_run)
    {
        $this->container['dry_run'] = $dry_run;

        return $this;
    }

    /**
     * Gets max_entries
     *
     * @return int
     */
    public function getMaxEntries()
    {
        return $this->container['max_entries'];
    }

    /**
     * Sets max_entries
     *
     * @param int $max_entries max_entries
     *
     * @return $this
     */
    public function setMaxEntries($max_entries)
    {
        $this->container['max_entries'] = $max_entries;

        return $this;
    }

    /**
     * Gets prefix_list_id
     *
     * @return string
     */
    public function getPrefixListId()
    {
        return $this->container['prefix_list_id'];
    }

    /**
     * Sets prefix_list_id
     *
     * @param string $prefix_list_id prefix_list_id
     *
     * @return $this
     */
    public function setPrefixListId($prefix_list_id)
    {
        $this->container['prefix_list_id'] = $prefix_list_id;

        return $this;
    }

    /**
     * Gets prefix_list_name
     *
     * @return string
     */
    public function getPrefixListName()
    {
        return $this->container['prefix_list_name'];
    }

    /**
     * Sets prefix_list_name
     *
     * @param string $prefix_list_name prefix_list_name
     *
     * @return $this
     */
    public function setPrefixListName($prefix_list_name)
    {
        $this->container['prefix_list_name'] = $prefix_list_name;

        return $this;
    }

    /**
     * Gets remove_prefix_list_entries
     *
     * @return \Volcengine\Vpc\Model\RemovePrefixListEntryForModifyPrefixListInput[]
     */
    public function getRemovePrefixListEntries()
    {
        return $this->container['remove_prefix_list_entries'];
    }

    /**
     * Sets remove_prefix_list_entries
     *
     * @param \Volcengine\Vpc\Model\RemovePrefixListEntryForModifyPrefixListInput[] $remove_prefix_list_entries remove_prefix_list_entries
     *
     * @return $this
     */
    public function setRemovePrefixListEntries($remove_prefix_list_entries)
    {
        $this->container['remove_prefix_list_entries'] = $remove_prefix_list_entries;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

