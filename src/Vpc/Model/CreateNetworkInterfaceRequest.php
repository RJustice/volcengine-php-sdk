<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vpc\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CreateNetworkInterfaceRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateNetworkInterfaceRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'client_token' => 'string',
        'description' => 'string',
        'network_interface_name' => 'string',
        'port_security_enabled' => 'bool',
        'primary_ip_address' => 'string',
        'private_ip_address' => 'string[]',
        'project_name' => 'string',
        'secondary_private_ip_address_count' => 'int',
        'security_group_ids' => 'string[]',
        'subnet_id' => 'string',
        'tags' => '\Volcengine\Vpc\Model\TagForCreateNetworkInterfaceInput[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'client_token' => null,
        'description' => null,
        'network_interface_name' => null,
        'port_security_enabled' => null,
        'primary_ip_address' => null,
        'private_ip_address' => null,
        'project_name' => null,
        'secondary_private_ip_address_count' => null,
        'security_group_ids' => null,
        'subnet_id' => null,
        'tags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_token' => 'ClientToken',
        'description' => 'Description',
        'network_interface_name' => 'NetworkInterfaceName',
        'port_security_enabled' => 'PortSecurityEnabled',
        'primary_ip_address' => 'PrimaryIpAddress',
        'private_ip_address' => 'PrivateIpAddress',
        'project_name' => 'ProjectName',
        'secondary_private_ip_address_count' => 'SecondaryPrivateIpAddressCount',
        'security_group_ids' => 'SecurityGroupIds',
        'subnet_id' => 'SubnetId',
        'tags' => 'Tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_token' => 'setClientToken',
        'description' => 'setDescription',
        'network_interface_name' => 'setNetworkInterfaceName',
        'port_security_enabled' => 'setPortSecurityEnabled',
        'primary_ip_address' => 'setPrimaryIpAddress',
        'private_ip_address' => 'setPrivateIpAddress',
        'project_name' => 'setProjectName',
        'secondary_private_ip_address_count' => 'setSecondaryPrivateIpAddressCount',
        'security_group_ids' => 'setSecurityGroupIds',
        'subnet_id' => 'setSubnetId',
        'tags' => 'setTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_token' => 'getClientToken',
        'description' => 'getDescription',
        'network_interface_name' => 'getNetworkInterfaceName',
        'port_security_enabled' => 'getPortSecurityEnabled',
        'primary_ip_address' => 'getPrimaryIpAddress',
        'private_ip_address' => 'getPrivateIpAddress',
        'project_name' => 'getProjectName',
        'secondary_private_ip_address_count' => 'getSecondaryPrivateIpAddressCount',
        'security_group_ids' => 'getSecurityGroupIds',
        'subnet_id' => 'getSubnetId',
        'tags' => 'getTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['client_token'] = isset($data['client_token']) ? $data['client_token'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['network_interface_name'] = isset($data['network_interface_name']) ? $data['network_interface_name'] : null;
        $this->container['port_security_enabled'] = isset($data['port_security_enabled']) ? $data['port_security_enabled'] : null;
        $this->container['primary_ip_address'] = isset($data['primary_ip_address']) ? $data['primary_ip_address'] : null;
        $this->container['private_ip_address'] = isset($data['private_ip_address']) ? $data['private_ip_address'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['secondary_private_ip_address_count'] = isset($data['secondary_private_ip_address_count']) ? $data['secondary_private_ip_address_count'] : null;
        $this->container['security_group_ids'] = isset($data['security_group_ids']) ? $data['security_group_ids'] : null;
        $this->container['subnet_id'] = isset($data['subnet_id']) ? $data['subnet_id'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['subnet_id'] === null) {
            $invalidProperties[] = "'subnet_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_token
     *
     * @return string
     */
    public function getClientToken()
    {
        return $this->container['client_token'];
    }

    /**
     * Sets client_token
     *
     * @param string $client_token client_token
     *
     * @return $this
     */
    public function setClientToken($client_token)
    {
        $this->container['client_token'] = $client_token;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets network_interface_name
     *
     * @return string
     */
    public function getNetworkInterfaceName()
    {
        return $this->container['network_interface_name'];
    }

    /**
     * Sets network_interface_name
     *
     * @param string $network_interface_name network_interface_name
     *
     * @return $this
     */
    public function setNetworkInterfaceName($network_interface_name)
    {
        $this->container['network_interface_name'] = $network_interface_name;

        return $this;
    }

    /**
     * Gets port_security_enabled
     *
     * @return bool
     */
    public function getPortSecurityEnabled()
    {
        return $this->container['port_security_enabled'];
    }

    /**
     * Sets port_security_enabled
     *
     * @param bool $port_security_enabled port_security_enabled
     *
     * @return $this
     */
    public function setPortSecurityEnabled($port_security_enabled)
    {
        $this->container['port_security_enabled'] = $port_security_enabled;

        return $this;
    }

    /**
     * Gets primary_ip_address
     *
     * @return string
     */
    public function getPrimaryIpAddress()
    {
        return $this->container['primary_ip_address'];
    }

    /**
     * Sets primary_ip_address
     *
     * @param string $primary_ip_address primary_ip_address
     *
     * @return $this
     */
    public function setPrimaryIpAddress($primary_ip_address)
    {
        $this->container['primary_ip_address'] = $primary_ip_address;

        return $this;
    }

    /**
     * Gets private_ip_address
     *
     * @return string[]
     */
    public function getPrivateIpAddress()
    {
        return $this->container['private_ip_address'];
    }

    /**
     * Sets private_ip_address
     *
     * @param string[] $private_ip_address private_ip_address
     *
     * @return $this
     */
    public function setPrivateIpAddress($private_ip_address)
    {
        $this->container['private_ip_address'] = $private_ip_address;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets secondary_private_ip_address_count
     *
     * @return int
     */
    public function getSecondaryPrivateIpAddressCount()
    {
        return $this->container['secondary_private_ip_address_count'];
    }

    /**
     * Sets secondary_private_ip_address_count
     *
     * @param int $secondary_private_ip_address_count secondary_private_ip_address_count
     *
     * @return $this
     */
    public function setSecondaryPrivateIpAddressCount($secondary_private_ip_address_count)
    {
        $this->container['secondary_private_ip_address_count'] = $secondary_private_ip_address_count;

        return $this;
    }

    /**
     * Gets security_group_ids
     *
     * @return string[]
     */
    public function getSecurityGroupIds()
    {
        return $this->container['security_group_ids'];
    }

    /**
     * Sets security_group_ids
     *
     * @param string[] $security_group_ids security_group_ids
     *
     * @return $this
     */
    public function setSecurityGroupIds($security_group_ids)
    {
        $this->container['security_group_ids'] = $security_group_ids;

        return $this;
    }

    /**
     * Gets subnet_id
     *
     * @return string
     */
    public function getSubnetId()
    {
        return $this->container['subnet_id'];
    }

    /**
     * Sets subnet_id
     *
     * @param string $subnet_id subnet_id
     *
     * @return $this
     */
    public function setSubnetId($subnet_id)
    {
        $this->container['subnet_id'] = $subnet_id;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Vpc\Model\TagForCreateNetworkInterfaceInput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Vpc\Model\TagForCreateNetworkInterfaceInput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

