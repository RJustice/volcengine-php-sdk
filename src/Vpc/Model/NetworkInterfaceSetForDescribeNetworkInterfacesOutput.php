<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vpc\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class NetworkInterfaceSetForDescribeNetworkInterfacesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NetworkInterfaceSetForDescribeNetworkInterfacesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'associated_elastic_ip' => '\Volcengine\Vpc\Model\AssociatedElasticIpForDescribeNetworkInterfacesOutput',
        'created_at' => 'string',
        'description' => 'string',
        'device_id' => 'string',
        'mac_address' => 'string',
        'network_interface_id' => 'string',
        'network_interface_name' => 'string',
        'port_security_enabled' => 'bool',
        'primary_ip_address' => 'string',
        'private_ip_sets' => '\Volcengine\Vpc\Model\PrivateIpSetsForDescribeNetworkInterfacesOutput',
        'project_name' => 'string',
        'security_group_ids' => 'string[]',
        'service_managed' => 'bool',
        'status' => 'string',
        'subnet_id' => 'string',
        'tags' => '\Volcengine\Vpc\Model\TagForDescribeNetworkInterfacesOutput[]',
        'type' => 'string',
        'updated_at' => 'string',
        'vpc_id' => 'string',
        'vpc_name' => 'string',
        'zone_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'associated_elastic_ip' => null,
        'created_at' => null,
        'description' => null,
        'device_id' => null,
        'mac_address' => null,
        'network_interface_id' => null,
        'network_interface_name' => null,
        'port_security_enabled' => null,
        'primary_ip_address' => null,
        'private_ip_sets' => null,
        'project_name' => null,
        'security_group_ids' => null,
        'service_managed' => null,
        'status' => null,
        'subnet_id' => null,
        'tags' => null,
        'type' => null,
        'updated_at' => null,
        'vpc_id' => null,
        'vpc_name' => null,
        'zone_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountId',
        'associated_elastic_ip' => 'AssociatedElasticIp',
        'created_at' => 'CreatedAt',
        'description' => 'Description',
        'device_id' => 'DeviceId',
        'mac_address' => 'MacAddress',
        'network_interface_id' => 'NetworkInterfaceId',
        'network_interface_name' => 'NetworkInterfaceName',
        'port_security_enabled' => 'PortSecurityEnabled',
        'primary_ip_address' => 'PrimaryIpAddress',
        'private_ip_sets' => 'PrivateIpSets',
        'project_name' => 'ProjectName',
        'security_group_ids' => 'SecurityGroupIds',
        'service_managed' => 'ServiceManaged',
        'status' => 'Status',
        'subnet_id' => 'SubnetId',
        'tags' => 'Tags',
        'type' => 'Type',
        'updated_at' => 'UpdatedAt',
        'vpc_id' => 'VpcId',
        'vpc_name' => 'VpcName',
        'zone_id' => 'ZoneId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'associated_elastic_ip' => 'setAssociatedElasticIp',
        'created_at' => 'setCreatedAt',
        'description' => 'setDescription',
        'device_id' => 'setDeviceId',
        'mac_address' => 'setMacAddress',
        'network_interface_id' => 'setNetworkInterfaceId',
        'network_interface_name' => 'setNetworkInterfaceName',
        'port_security_enabled' => 'setPortSecurityEnabled',
        'primary_ip_address' => 'setPrimaryIpAddress',
        'private_ip_sets' => 'setPrivateIpSets',
        'project_name' => 'setProjectName',
        'security_group_ids' => 'setSecurityGroupIds',
        'service_managed' => 'setServiceManaged',
        'status' => 'setStatus',
        'subnet_id' => 'setSubnetId',
        'tags' => 'setTags',
        'type' => 'setType',
        'updated_at' => 'setUpdatedAt',
        'vpc_id' => 'setVpcId',
        'vpc_name' => 'setVpcName',
        'zone_id' => 'setZoneId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'associated_elastic_ip' => 'getAssociatedElasticIp',
        'created_at' => 'getCreatedAt',
        'description' => 'getDescription',
        'device_id' => 'getDeviceId',
        'mac_address' => 'getMacAddress',
        'network_interface_id' => 'getNetworkInterfaceId',
        'network_interface_name' => 'getNetworkInterfaceName',
        'port_security_enabled' => 'getPortSecurityEnabled',
        'primary_ip_address' => 'getPrimaryIpAddress',
        'private_ip_sets' => 'getPrivateIpSets',
        'project_name' => 'getProjectName',
        'security_group_ids' => 'getSecurityGroupIds',
        'service_managed' => 'getServiceManaged',
        'status' => 'getStatus',
        'subnet_id' => 'getSubnetId',
        'tags' => 'getTags',
        'type' => 'getType',
        'updated_at' => 'getUpdatedAt',
        'vpc_id' => 'getVpcId',
        'vpc_name' => 'getVpcName',
        'zone_id' => 'getZoneId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['associated_elastic_ip'] = isset($data['associated_elastic_ip']) ? $data['associated_elastic_ip'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['device_id'] = isset($data['device_id']) ? $data['device_id'] : null;
        $this->container['mac_address'] = isset($data['mac_address']) ? $data['mac_address'] : null;
        $this->container['network_interface_id'] = isset($data['network_interface_id']) ? $data['network_interface_id'] : null;
        $this->container['network_interface_name'] = isset($data['network_interface_name']) ? $data['network_interface_name'] : null;
        $this->container['port_security_enabled'] = isset($data['port_security_enabled']) ? $data['port_security_enabled'] : null;
        $this->container['primary_ip_address'] = isset($data['primary_ip_address']) ? $data['primary_ip_address'] : null;
        $this->container['private_ip_sets'] = isset($data['private_ip_sets']) ? $data['private_ip_sets'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['security_group_ids'] = isset($data['security_group_ids']) ? $data['security_group_ids'] : null;
        $this->container['service_managed'] = isset($data['service_managed']) ? $data['service_managed'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['subnet_id'] = isset($data['subnet_id']) ? $data['subnet_id'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['vpc_id'] = isset($data['vpc_id']) ? $data['vpc_id'] : null;
        $this->container['vpc_name'] = isset($data['vpc_name']) ? $data['vpc_name'] : null;
        $this->container['zone_id'] = isset($data['zone_id']) ? $data['zone_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets associated_elastic_ip
     *
     * @return \Volcengine\Vpc\Model\AssociatedElasticIpForDescribeNetworkInterfacesOutput
     */
    public function getAssociatedElasticIp()
    {
        return $this->container['associated_elastic_ip'];
    }

    /**
     * Sets associated_elastic_ip
     *
     * @param \Volcengine\Vpc\Model\AssociatedElasticIpForDescribeNetworkInterfacesOutput $associated_elastic_ip associated_elastic_ip
     *
     * @return $this
     */
    public function setAssociatedElasticIp($associated_elastic_ip)
    {
        $this->container['associated_elastic_ip'] = $associated_elastic_ip;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets device_id
     *
     * @return string
     */
    public function getDeviceId()
    {
        return $this->container['device_id'];
    }

    /**
     * Sets device_id
     *
     * @param string $device_id device_id
     *
     * @return $this
     */
    public function setDeviceId($device_id)
    {
        $this->container['device_id'] = $device_id;

        return $this;
    }

    /**
     * Gets mac_address
     *
     * @return string
     */
    public function getMacAddress()
    {
        return $this->container['mac_address'];
    }

    /**
     * Sets mac_address
     *
     * @param string $mac_address mac_address
     *
     * @return $this
     */
    public function setMacAddress($mac_address)
    {
        $this->container['mac_address'] = $mac_address;

        return $this;
    }

    /**
     * Gets network_interface_id
     *
     * @return string
     */
    public function getNetworkInterfaceId()
    {
        return $this->container['network_interface_id'];
    }

    /**
     * Sets network_interface_id
     *
     * @param string $network_interface_id network_interface_id
     *
     * @return $this
     */
    public function setNetworkInterfaceId($network_interface_id)
    {
        $this->container['network_interface_id'] = $network_interface_id;

        return $this;
    }

    /**
     * Gets network_interface_name
     *
     * @return string
     */
    public function getNetworkInterfaceName()
    {
        return $this->container['network_interface_name'];
    }

    /**
     * Sets network_interface_name
     *
     * @param string $network_interface_name network_interface_name
     *
     * @return $this
     */
    public function setNetworkInterfaceName($network_interface_name)
    {
        $this->container['network_interface_name'] = $network_interface_name;

        return $this;
    }

    /**
     * Gets port_security_enabled
     *
     * @return bool
     */
    public function getPortSecurityEnabled()
    {
        return $this->container['port_security_enabled'];
    }

    /**
     * Sets port_security_enabled
     *
     * @param bool $port_security_enabled port_security_enabled
     *
     * @return $this
     */
    public function setPortSecurityEnabled($port_security_enabled)
    {
        $this->container['port_security_enabled'] = $port_security_enabled;

        return $this;
    }

    /**
     * Gets primary_ip_address
     *
     * @return string
     */
    public function getPrimaryIpAddress()
    {
        return $this->container['primary_ip_address'];
    }

    /**
     * Sets primary_ip_address
     *
     * @param string $primary_ip_address primary_ip_address
     *
     * @return $this
     */
    public function setPrimaryIpAddress($primary_ip_address)
    {
        $this->container['primary_ip_address'] = $primary_ip_address;

        return $this;
    }

    /**
     * Gets private_ip_sets
     *
     * @return \Volcengine\Vpc\Model\PrivateIpSetsForDescribeNetworkInterfacesOutput
     */
    public function getPrivateIpSets()
    {
        return $this->container['private_ip_sets'];
    }

    /**
     * Sets private_ip_sets
     *
     * @param \Volcengine\Vpc\Model\PrivateIpSetsForDescribeNetworkInterfacesOutput $private_ip_sets private_ip_sets
     *
     * @return $this
     */
    public function setPrivateIpSets($private_ip_sets)
    {
        $this->container['private_ip_sets'] = $private_ip_sets;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets security_group_ids
     *
     * @return string[]
     */
    public function getSecurityGroupIds()
    {
        return $this->container['security_group_ids'];
    }

    /**
     * Sets security_group_ids
     *
     * @param string[] $security_group_ids security_group_ids
     *
     * @return $this
     */
    public function setSecurityGroupIds($security_group_ids)
    {
        $this->container['security_group_ids'] = $security_group_ids;

        return $this;
    }

    /**
     * Gets service_managed
     *
     * @return bool
     */
    public function getServiceManaged()
    {
        return $this->container['service_managed'];
    }

    /**
     * Sets service_managed
     *
     * @param bool $service_managed service_managed
     *
     * @return $this
     */
    public function setServiceManaged($service_managed)
    {
        $this->container['service_managed'] = $service_managed;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets subnet_id
     *
     * @return string
     */
    public function getSubnetId()
    {
        return $this->container['subnet_id'];
    }

    /**
     * Sets subnet_id
     *
     * @param string $subnet_id subnet_id
     *
     * @return $this
     */
    public function setSubnetId($subnet_id)
    {
        $this->container['subnet_id'] = $subnet_id;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Vpc\Model\TagForDescribeNetworkInterfacesOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Vpc\Model\TagForDescribeNetworkInterfacesOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets vpc_id
     *
     * @return string
     */
    public function getVpcId()
    {
        return $this->container['vpc_id'];
    }

    /**
     * Sets vpc_id
     *
     * @param string $vpc_id vpc_id
     *
     * @return $this
     */
    public function setVpcId($vpc_id)
    {
        $this->container['vpc_id'] = $vpc_id;

        return $this;
    }

    /**
     * Gets vpc_name
     *
     * @return string
     */
    public function getVpcName()
    {
        return $this->container['vpc_name'];
    }

    /**
     * Sets vpc_name
     *
     * @param string $vpc_name vpc_name
     *
     * @return $this
     */
    public function setVpcName($vpc_name)
    {
        $this->container['vpc_name'] = $vpc_name;

        return $this;
    }

    /**
     * Gets zone_id
     *
     * @return string
     */
    public function getZoneId()
    {
        return $this->container['zone_id'];
    }

    /**
     * Sets zone_id
     *
     * @param string $zone_id zone_id
     *
     * @return $this
     */
    public function setZoneId($zone_id)
    {
        $this->container['zone_id'] = $zone_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

