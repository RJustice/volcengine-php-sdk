<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vpc\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class UpdateNetworkAclEntriesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateNetworkAclEntriesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'client_token' => 'string',
        'egress_acl_entries' => '\Volcengine\Vpc\Model\EgressAclEntryForUpdateNetworkAclEntriesInput[]',
        'ingress_acl_entries' => '\Volcengine\Vpc\Model\IngressAclEntryForUpdateNetworkAclEntriesInput[]',
        'network_acl_id' => 'string',
        'update_egress_acl_entries' => 'bool',
        'update_ingress_acl_entries' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'client_token' => null,
        'egress_acl_entries' => null,
        'ingress_acl_entries' => null,
        'network_acl_id' => null,
        'update_egress_acl_entries' => null,
        'update_ingress_acl_entries' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_token' => 'ClientToken',
        'egress_acl_entries' => 'EgressAclEntries',
        'ingress_acl_entries' => 'IngressAclEntries',
        'network_acl_id' => 'NetworkAclId',
        'update_egress_acl_entries' => 'UpdateEgressAclEntries',
        'update_ingress_acl_entries' => 'UpdateIngressAclEntries'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_token' => 'setClientToken',
        'egress_acl_entries' => 'setEgressAclEntries',
        'ingress_acl_entries' => 'setIngressAclEntries',
        'network_acl_id' => 'setNetworkAclId',
        'update_egress_acl_entries' => 'setUpdateEgressAclEntries',
        'update_ingress_acl_entries' => 'setUpdateIngressAclEntries'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_token' => 'getClientToken',
        'egress_acl_entries' => 'getEgressAclEntries',
        'ingress_acl_entries' => 'getIngressAclEntries',
        'network_acl_id' => 'getNetworkAclId',
        'update_egress_acl_entries' => 'getUpdateEgressAclEntries',
        'update_ingress_acl_entries' => 'getUpdateIngressAclEntries'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['client_token'] = isset($data['client_token']) ? $data['client_token'] : null;
        $this->container['egress_acl_entries'] = isset($data['egress_acl_entries']) ? $data['egress_acl_entries'] : null;
        $this->container['ingress_acl_entries'] = isset($data['ingress_acl_entries']) ? $data['ingress_acl_entries'] : null;
        $this->container['network_acl_id'] = isset($data['network_acl_id']) ? $data['network_acl_id'] : null;
        $this->container['update_egress_acl_entries'] = isset($data['update_egress_acl_entries']) ? $data['update_egress_acl_entries'] : null;
        $this->container['update_ingress_acl_entries'] = isset($data['update_ingress_acl_entries']) ? $data['update_ingress_acl_entries'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['network_acl_id'] === null) {
            $invalidProperties[] = "'network_acl_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_token
     *
     * @return string
     */
    public function getClientToken()
    {
        return $this->container['client_token'];
    }

    /**
     * Sets client_token
     *
     * @param string $client_token client_token
     *
     * @return $this
     */
    public function setClientToken($client_token)
    {
        $this->container['client_token'] = $client_token;

        return $this;
    }

    /**
     * Gets egress_acl_entries
     *
     * @return \Volcengine\Vpc\Model\EgressAclEntryForUpdateNetworkAclEntriesInput[]
     */
    public function getEgressAclEntries()
    {
        return $this->container['egress_acl_entries'];
    }

    /**
     * Sets egress_acl_entries
     *
     * @param \Volcengine\Vpc\Model\EgressAclEntryForUpdateNetworkAclEntriesInput[] $egress_acl_entries egress_acl_entries
     *
     * @return $this
     */
    public function setEgressAclEntries($egress_acl_entries)
    {
        $this->container['egress_acl_entries'] = $egress_acl_entries;

        return $this;
    }

    /**
     * Gets ingress_acl_entries
     *
     * @return \Volcengine\Vpc\Model\IngressAclEntryForUpdateNetworkAclEntriesInput[]
     */
    public function getIngressAclEntries()
    {
        return $this->container['ingress_acl_entries'];
    }

    /**
     * Sets ingress_acl_entries
     *
     * @param \Volcengine\Vpc\Model\IngressAclEntryForUpdateNetworkAclEntriesInput[] $ingress_acl_entries ingress_acl_entries
     *
     * @return $this
     */
    public function setIngressAclEntries($ingress_acl_entries)
    {
        $this->container['ingress_acl_entries'] = $ingress_acl_entries;

        return $this;
    }

    /**
     * Gets network_acl_id
     *
     * @return string
     */
    public function getNetworkAclId()
    {
        return $this->container['network_acl_id'];
    }

    /**
     * Sets network_acl_id
     *
     * @param string $network_acl_id network_acl_id
     *
     * @return $this
     */
    public function setNetworkAclId($network_acl_id)
    {
        $this->container['network_acl_id'] = $network_acl_id;

        return $this;
    }

    /**
     * Gets update_egress_acl_entries
     *
     * @return bool
     */
    public function getUpdateEgressAclEntries()
    {
        return $this->container['update_egress_acl_entries'];
    }

    /**
     * Sets update_egress_acl_entries
     *
     * @param bool $update_egress_acl_entries update_egress_acl_entries
     *
     * @return $this
     */
    public function setUpdateEgressAclEntries($update_egress_acl_entries)
    {
        $this->container['update_egress_acl_entries'] = $update_egress_acl_entries;

        return $this;
    }

    /**
     * Gets update_ingress_acl_entries
     *
     * @return bool
     */
    public function getUpdateIngressAclEntries()
    {
        return $this->container['update_ingress_acl_entries'];
    }

    /**
     * Sets update_ingress_acl_entries
     *
     * @param bool $update_ingress_acl_entries update_ingress_acl_entries
     *
     * @return $this
     */
    public function setUpdateIngressAclEntries($update_ingress_acl_entries)
    {
        $this->container['update_ingress_acl_entries'] = $update_ingress_acl_entries;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

