<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vpc\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class RouteEntryForDescribeRouteEntryListOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RouteEntryForDescribeRouteEntryListOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'description' => 'string',
        'destination_cidr_block' => 'string',
        'next_hop_id' => 'string',
        'next_hop_name' => 'string',
        'next_hop_type' => 'string',
        'prefix_list_cidr_blocks' => 'string[]',
        'route_entry_id' => 'string',
        'route_entry_name' => 'string',
        'route_table_id' => 'string',
        'status' => 'string',
        'type' => 'string',
        'vpc_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'description' => null,
        'destination_cidr_block' => null,
        'next_hop_id' => null,
        'next_hop_name' => null,
        'next_hop_type' => null,
        'prefix_list_cidr_blocks' => null,
        'route_entry_id' => null,
        'route_entry_name' => null,
        'route_table_id' => null,
        'status' => null,
        'type' => null,
        'vpc_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'Description',
        'destination_cidr_block' => 'DestinationCidrBlock',
        'next_hop_id' => 'NextHopId',
        'next_hop_name' => 'NextHopName',
        'next_hop_type' => 'NextHopType',
        'prefix_list_cidr_blocks' => 'PrefixListCidrBlocks',
        'route_entry_id' => 'RouteEntryId',
        'route_entry_name' => 'RouteEntryName',
        'route_table_id' => 'RouteTableId',
        'status' => 'Status',
        'type' => 'Type',
        'vpc_id' => 'VpcId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'destination_cidr_block' => 'setDestinationCidrBlock',
        'next_hop_id' => 'setNextHopId',
        'next_hop_name' => 'setNextHopName',
        'next_hop_type' => 'setNextHopType',
        'prefix_list_cidr_blocks' => 'setPrefixListCidrBlocks',
        'route_entry_id' => 'setRouteEntryId',
        'route_entry_name' => 'setRouteEntryName',
        'route_table_id' => 'setRouteTableId',
        'status' => 'setStatus',
        'type' => 'setType',
        'vpc_id' => 'setVpcId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'destination_cidr_block' => 'getDestinationCidrBlock',
        'next_hop_id' => 'getNextHopId',
        'next_hop_name' => 'getNextHopName',
        'next_hop_type' => 'getNextHopType',
        'prefix_list_cidr_blocks' => 'getPrefixListCidrBlocks',
        'route_entry_id' => 'getRouteEntryId',
        'route_entry_name' => 'getRouteEntryName',
        'route_table_id' => 'getRouteTableId',
        'status' => 'getStatus',
        'type' => 'getType',
        'vpc_id' => 'getVpcId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['destination_cidr_block'] = isset($data['destination_cidr_block']) ? $data['destination_cidr_block'] : null;
        $this->container['next_hop_id'] = isset($data['next_hop_id']) ? $data['next_hop_id'] : null;
        $this->container['next_hop_name'] = isset($data['next_hop_name']) ? $data['next_hop_name'] : null;
        $this->container['next_hop_type'] = isset($data['next_hop_type']) ? $data['next_hop_type'] : null;
        $this->container['prefix_list_cidr_blocks'] = isset($data['prefix_list_cidr_blocks']) ? $data['prefix_list_cidr_blocks'] : null;
        $this->container['route_entry_id'] = isset($data['route_entry_id']) ? $data['route_entry_id'] : null;
        $this->container['route_entry_name'] = isset($data['route_entry_name']) ? $data['route_entry_name'] : null;
        $this->container['route_table_id'] = isset($data['route_table_id']) ? $data['route_table_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['vpc_id'] = isset($data['vpc_id']) ? $data['vpc_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets destination_cidr_block
     *
     * @return string
     */
    public function getDestinationCidrBlock()
    {
        return $this->container['destination_cidr_block'];
    }

    /**
     * Sets destination_cidr_block
     *
     * @param string $destination_cidr_block destination_cidr_block
     *
     * @return $this
     */
    public function setDestinationCidrBlock($destination_cidr_block)
    {
        $this->container['destination_cidr_block'] = $destination_cidr_block;

        return $this;
    }

    /**
     * Gets next_hop_id
     *
     * @return string
     */
    public function getNextHopId()
    {
        return $this->container['next_hop_id'];
    }

    /**
     * Sets next_hop_id
     *
     * @param string $next_hop_id next_hop_id
     *
     * @return $this
     */
    public function setNextHopId($next_hop_id)
    {
        $this->container['next_hop_id'] = $next_hop_id;

        return $this;
    }

    /**
     * Gets next_hop_name
     *
     * @return string
     */
    public function getNextHopName()
    {
        return $this->container['next_hop_name'];
    }

    /**
     * Sets next_hop_name
     *
     * @param string $next_hop_name next_hop_name
     *
     * @return $this
     */
    public function setNextHopName($next_hop_name)
    {
        $this->container['next_hop_name'] = $next_hop_name;

        return $this;
    }

    /**
     * Gets next_hop_type
     *
     * @return string
     */
    public function getNextHopType()
    {
        return $this->container['next_hop_type'];
    }

    /**
     * Sets next_hop_type
     *
     * @param string $next_hop_type next_hop_type
     *
     * @return $this
     */
    public function setNextHopType($next_hop_type)
    {
        $this->container['next_hop_type'] = $next_hop_type;

        return $this;
    }

    /**
     * Gets prefix_list_cidr_blocks
     *
     * @return string[]
     */
    public function getPrefixListCidrBlocks()
    {
        return $this->container['prefix_list_cidr_blocks'];
    }

    /**
     * Sets prefix_list_cidr_blocks
     *
     * @param string[] $prefix_list_cidr_blocks prefix_list_cidr_blocks
     *
     * @return $this
     */
    public function setPrefixListCidrBlocks($prefix_list_cidr_blocks)
    {
        $this->container['prefix_list_cidr_blocks'] = $prefix_list_cidr_blocks;

        return $this;
    }

    /**
     * Gets route_entry_id
     *
     * @return string
     */
    public function getRouteEntryId()
    {
        return $this->container['route_entry_id'];
    }

    /**
     * Sets route_entry_id
     *
     * @param string $route_entry_id route_entry_id
     *
     * @return $this
     */
    public function setRouteEntryId($route_entry_id)
    {
        $this->container['route_entry_id'] = $route_entry_id;

        return $this;
    }

    /**
     * Gets route_entry_name
     *
     * @return string
     */
    public function getRouteEntryName()
    {
        return $this->container['route_entry_name'];
    }

    /**
     * Sets route_entry_name
     *
     * @param string $route_entry_name route_entry_name
     *
     * @return $this
     */
    public function setRouteEntryName($route_entry_name)
    {
        $this->container['route_entry_name'] = $route_entry_name;

        return $this;
    }

    /**
     * Gets route_table_id
     *
     * @return string
     */
    public function getRouteTableId()
    {
        return $this->container['route_table_id'];
    }

    /**
     * Sets route_table_id
     *
     * @param string $route_table_id route_table_id
     *
     * @return $this
     */
    public function setRouteTableId($route_table_id)
    {
        $this->container['route_table_id'] = $route_table_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets vpc_id
     *
     * @return string
     */
    public function getVpcId()
    {
        return $this->container['vpc_id'];
    }

    /**
     * Sets vpc_id
     *
     * @param string $vpc_id vpc_id
     *
     * @return $this
     */
    public function setVpcId($vpc_id)
    {
        $this->container['vpc_id'] = $vpc_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

